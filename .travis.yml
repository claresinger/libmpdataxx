language: cpp
os: 
    - linux
    - osx
dist: trusty
compiler:
    - gcc
    - clang
env:
#    - MPI=none
#    - MPI=openmpi
# not supported by Boost.MPI in Debian on amd64:
#    - MPI=lam    
#    - MPI=mpich  

    - TEST_SUITE=unit MPI=none
    - TEST_SUITE=sandbox MPI=none
    - TEST_SUITE=paper MPI=none
    - TEST_SUITE=elliptic_drop MPI=none
    - TEST_SUITE=nair_jablonowski_2008 MPI=none
    - TEST_SUITE=UWLCM MPI=none
    - TEST_SUITE=pbl MPI=none 
    - TEST_SUITE=osx_local_clang MPI=none
    - TEST_SUITE=unit MPI=mvapich2
    - TEST_SUITE=sandbox MPI=mvapich2
# MPI paper tests don't do file comparison and plotting; TODO: fix them
    - TEST_SUITE=paper MPI=mvapich2
    - TEST_SUITE=elliptic_drop MPI=mvapich2
# disabled, because polar bconds dont work with MPI
#    - TEST_SUITE=nair_jablonowski_2008 MPI=mvapich2
    - TEST_SUITE=pbl MPI=mvapich2
# bconds_div has to be ran separately with mpi because of timeouts
    - TEST_SUITE=bconds_div MPI=mvapich2 
# TODO: once libcloud MPI works, turn UWLCM MPI test on
#    - TEST_SUITE=UWLCM MPI=mvapich2

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/mvapich2-2.3b
    - ${TRAVIS_BUILD_DIR}/deps/boost

matrix:
    exclude:
#   MPI with clang disabled due to difficulties with building boost with clang
        - compiler: clang
          env: TEST_SUITE=unit MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=sandbox MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=paper MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=elliptic_drop MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=nair_jablonowski_2008 MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=pbl MPI=mvapich2
        - compiler: clang
          env: TEST_SUITE=bconds_div MPI=mvapich2

        - os: osx
          env: TEST_SUITE=pbl MPI=none  # pbl not tested on osx
        - os: osx
          compiler: gcc

        - compiler: clang
          env: TEST_SUITE=UWLCM MPI=none # UWLCM is not tested on clang yet
       
        # local clang tests on osx
        - os: linux
          env: TEST_SUITE=osx_local_clang MPI=none
        - compiler: gcc
          env: TEST_SUITE=osx_local_clang MPI=none
addons:
  apt:
    packages:
      - g++-6
      - clang-5.0
    sources: &sources
      - sourceline: 'ppa:rakhimov/boost'
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-5.0

before_install:
    # define a compiler variable for use in if statements
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then export COMPILER=clang++; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'g++'     ]]; then export COMPILER=g++; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then export COMPILER=clang++; fi # only clang on osx

# to avoid python lib/interpreter mismatch; https://github.com/travis-ci/travis-ci/issues/5326
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g"); fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ trusty main universe multiverse"; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get update; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export apt_get_install="apt-get install --no-install-recommends -t trusty -y"; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew update; fi
    # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew tap homebrew/science; fi
    # - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then rvm get stable; fi #see https://github.com/travis-ci/travis-ci/issues/6307
    
    # Workaround for upgrading gcc, see https://github.com/travis-ci/travis-ci/issues/8826
    # Seems like this is now done by Travis, but leaving it (commented out) for now
    #- if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew cask uninstall oclint; fi
    
    # needed to get rvm, see below
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -; fi
    # https://github.com/travis-ci/travis-ci/issues/10165
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then rvm get stable; fi
   
    # locally installed stuff comes first
    - export PATH=/usr/local/bin:$PATH

    # fixing broken OSX gzip tools
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gzip; fi
     
    # to avoid problems with plotting by paraview on Travis
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then unset DISPLAY; fi 

    - export make_j="make -j 4"

    # testing both Python 2 and 3 on Linux (unrelated to compiler choice!)
    - export PY3DEB=""
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'g++' && $MPI == 'none' ]]; then PY3DEB=3; fi # had problems with building h5py using python3-pip
    - if [[ $PY3DEB != '' ]]; then sudo apt-get install python3-dev; fi
   
    # upgrade pip
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install --upgrade pip; fi 
 
install:
    ############################################################################
    ## All the cached dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
    #############################################################################
    - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"

    # silence the gazillion warnings coming from blitz headers when using the osx clang
    - if [[ $TRAVIS_OS_NAME == 'osx' && $COMPILER == 'clang++' ]]; then export CXXFLAGS="-Wno-parentheses ${CXXFLAGS}"; fi

    # get libclang-dev for headers
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'clang++' && $MPI != 'none' ]]; then sudo $apt_get_install libclang-5.0-dev; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'clang++' && $MPI != 'none' ]]; then export CXXFLAGS="-nostdinc++ ${CXXFLAGS}"; fi

    # redefine CXX to the actual version used
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'clang++' ]]; then export CXX=clang++-5.0; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'g++'     ]]; then export CXX=g++-6; fi
    # downloads and setups local clang on osx
    - if [[ $TEST_SUITE == 'osx_local_clang' ]]; then . ./.travis_scripts/setup_local_clang.sh; fi

#<<<<<<< HEAD
    # add a definition -DBOOST_HAS_INT128=1 to clang calls on linux to avoid errors with boost.atomic (https://svn.boost.org/trac/boost/ticket/9610)
#    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then mkdir /tmp/bin; fi
#    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then printf "#!/bin/sh\nexec /usr/bin/clang++ -DBOOST_HAS_INT128=1 \"\$@\"" > /tmp/bin/clang++; fi
#    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then chmod +x /tmp/bin/clang++; fi
#    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then sudo ln -sf /tmp/bin/clang++ /usr/bin/clang++; fi
    # put /usr/bin first to use clang++-3.5 instead of the default 3.4
    #- if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then export PATH=/usr/bin:$PATH; fi

    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then export CXXFLAGS="-DBOOST_HAS_INT128=1 ${CXXFLAGS}"; fi

    # cmake 
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2-Linux-x86_64.sh; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo sh cmake-3.13.2-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir; fi

    # MPI
    - if [[ $MPI == 'mpich'    ]]; then sudo $apt_get_install mpich libmpich-dev; fi
    - if [[ $MPI == 'lam'      ]]; then sudo $apt_get_install lam-runtime lam4-dev; fi
    - if [[ $MPI == 'openmpi'  ]]; then sudo $apt_get_install openmpi-bin libopenmpi-dev; fi
    - |
      if [[ $MPI == 'mvapich2' ]]; then 
        ls -A ${DEPS_DIR}/mvapich2-2.3b
        if [[ -z "$(ls -A ${DEPS_DIR}/mvapich2-2.3b)" ]]; then
          wget http://mvapich.cse.ohio-state.edu/download/mvapich/mv2/mvapich2-2.3b.tar.gz;
          tar xf mvapich2-2.3b.tar.gz;
          cd mvapich2-2.3b;
          if [[ $COMPILER == 'g++' ]]; then ./configure --disable-fortran --enable-cxx --enable-threads=multiple --with-device=ch3:sock CC=gcc-6 CXX=g++-6 --prefix=${DEPS_DIR}/mvapich2-2.3b ; fi 
          if [[ $COMPILER == 'clang++' ]]; then ./configure --disable-fortran --enable-cxx --enable-threads=multiple --with-device=ch3:sock CC=clang-5.0 CXX=clang++-5.0 --prefix=${DEPS_DIR}/mvapich2-2.3b ; fi 
          make -j4;  
          make install;
          cd ..;
        else
          echo "Using cached mvapich2."
        fi
        export PATH=${DEPS_DIR}/mvapich2-2.3b/bin:${PATH}
        # LIBRARY_PATH for clang?osx?
        export LD_LIBRARY_PATH=${DEPS_DIR}/mvapich2-2.3b/lib:${LD_LIBRARY_PATH}
        export LD_RUN_PATH=${DEPS_DIR}/mvapich2-2.3b/lib:${LD_RUN_PATH}
        export LIBRARY_PATH=${DEPS_DIR}/mvapich2-2.3b/lib:${LIBRARY_PATH}
      fi

    - if [[ $MPI != 'none'    ]]; then export CXX=${DEPS_DIR}/mvapich2-2.3b/bin/mpic++ ; fi # full path, since libtool in hdf5 installation does not understand PATH set above (?)
    - if [[ $MPI != 'none'    ]]; then export CC=${DEPS_DIR}/mvapich2-2.3b/bin/mpicc ; fi

    # boost
    #- if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libboost-thread1.55-dev libboost-timer1.55-dev libboost-iostreams1.55-dev libboost-filesystem1.55-dev; fi
    #- if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then sudo $apt_get_install libboost-mpi1.55-dev; fi
    #- if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew reinstall boost --c++11; fi          # ...what takes too long :(

    # no MPI - get boost from the repository
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI == 'none' ]]; then sudo $apt_get_install boost1.61; fi

    # for MPI we need boost>=1.59 with mpi support, boost installation based on https://github.com/boostorg/compute/blob/master/.travis.yml
    - | 
      if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then 
        ls -A ${DEPS_DIR}/boost
        if [[ -z "$(ls -A ${DEPS_DIR}/boost)" ]]; then
          wget http://sourceforge.net/projects/boost/files/boost/1.65.1/boost_1_65_1.tar.gz 
          tar xf boost_1_65_1.tar.gz
          cd boost_1_65_1
          # configure and install
          if [[ $COMPILER == 'g++' ]]; then echo "using gcc : 6.2 : g++-6 ;" > $HOME/user-config.jam; fi
          if [[ $COMPILER == 'clang++' ]]; then echo "using clang : 5.0 : clang++-5.0 ;" > $HOME/user-config.jam; fi
          echo "using mpi : $CC ;" >> $HOME/user-config.jam
          cat $HOME/user-config.jam
          if [[ $COMPILER == 'g++' ]]; then
            ./bootstrap.sh --prefix=${DEPS_DIR}/boost/ --with-libraries=serialization,mpi,thread,date_time,system,iostreams,timer,filesystem
            ./b2 -d0 install
          fi
          if [[ $COMPILER == 'clang++' ]]; then 
            #clang installation taken from https://gist.github.com/jimporter/10442880
            ./bootstrap.sh --prefix=${DEPS_DIR}/boost/ --with-libraries=serialization,mpi,thread,date_time,system,iostreams,timer,filesystem --with-toolset=clang
            ./b2 clean
            ./b2 toolset=clang cxxflags="-std=c++14 -stdlib=libc++" linkflags="-stdlib=libc++" --prefix=${DEPS_DIR}/boost/ -j 4 stage release
            ./b2 install toolset=clang cxxflags="-std=c++14 -stdlib=libc++" linkflags="-stdlib=libc++" --prefix=${DEPS_DIR}/boost/
          fi
          cd ..
        else
          echo "Using cached boost."
        fi
        export BOOST_ROOT=${DEPS_DIR}/boost
        export LD_LIBRARY_PATH=${DEPS_DIR}/boost/lib:${LD_LIBRARY_PATH}
        export LD_RUN_PATH=${DEPS_DIR}/boost/lib:${LD_RUN_PATH}
        export LIBRARY_PATH=${DEPS_DIR}/boost/lib:${LIBRARY_PATH}
        export CPATH=${DEPS_DIR}/boost/include:${CPATH}
      fi

    # blitz
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install blitz; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libblitz0-dev; fi

    # Ubuntu dependency issue fix
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" libpango-1.0-0 libpangocairo-1.0-0; fi

    # hdf5
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI == 'none' ]]; then sudo $apt_get_install libhdf5-7; fi # Ubuntu dependency issue fix
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI == 'none' ]]; then sudo $apt_get_install libhdf5-serial-dev; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI == 'none' ]]; then sudo $apt_get_install hdf5-tools; fi

    # C++ support missing in Debian package ...
    #- if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then sudo $apt_get_install libhdf5-openmpi-dev; fi 
    # ... so we are installing it manually:
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then wget https://support.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.10.5.tar; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then tar xf hdf5-1.10.5.tar; fi 
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then cd hdf5-1.10.5; fi 
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then CXXFLAGS=-w CFLAGS=-w ./configure --enable-parallel --enable-cxx --enable-unsupported --enable-threadsafe --prefix=/usr; fi 
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then make; fi 
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then sudo make install; fi 
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then cd ..; fi 

#    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install  -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" libpango-1.0-0 libpangocairo-1.0-0 libhdf5-dev; fi
#    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install hdf5-tools; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install hdf5; fi

    # gnuplot-iostream
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install gnuplot-nox; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gnuplot; fi
    - sudo wget -O /usr/local/include/gnuplot-iostream.h https://raw.githubusercontent.com/dstahlke/gnuplot-iostream/master/gnuplot-iostream.h
    
    # Python modules
    # make Python 3 the default if requested
    - if [[ $PY3DEB != '' ]]; then sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10; fi

    # h5py
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI == 'none' ]]; then sudo $apt_get_install python$PY3DEB-h5py; fi 
    # build h5py with mpi support
    #- if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then sudo pip install mpi4py; fi 
    - |
      if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then
        sudo pip install Cython # to generate the C wrappers
        #sudo pip install https://bitbucket.org/mpi4py/mpi4py/get/master.tar.gz
        mkdir mpi4py
        cd mpi4py
        travis_retry wget --no-check-certificate --quiet -O - https://bitbucket.org/mpi4py/mpi4py/get/master.tar.gz | tar --strip-components=1 -xz 
        python setup.py build
        sudo python setup.py install
        cd ..
      fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $MPI != 'none' ]]; then HDF5_MPI="ON" sudo pip install --no-binary=h5py h5py; fi 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install h5py; fi 

    # scipy 
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install python$PY3DEB-scipy; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install scipy; fi 

    # matplotlib
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install python$PY3DEB-matplotlib; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install matplotlib; fi

script:
    # libmpdata++
    - cd libmpdata++
    - mkdir build
    - cd build
    - cmake ..
    - cd ../..

    # compiling and running all unit tests in Debug & Release modes
    - if [[ $TEST_SUITE == 'unit' ]]; then . ./.travis_scripts/unit.sh; fi # with '.' to pass env vars

    # compiling and running selected paper tests in Debug mode
    - if [[ $TEST_SUITE == 'paper' ]]; then . ./.travis_scripts/paper.sh; fi

    # compiling all sandbox tests in Release mode
    - if [[ $TEST_SUITE == 'sandbox' ]]; then . ./.travis_scripts/sandbox.sh; fi

    - if [[ $TEST_SUITE == 'elliptic_drop' ]]; then . ./.travis_scripts/elliptic_drop.sh; fi

    # running tests from UWLCM in Release mode
    - if [[ $TEST_SUITE == 'UWLCM' ]]; then . ./.travis_scripts/UWLCM.sh; fi # with '.' to pass env vars
    
    # compiling and running tests from Nair & Jablonowski 2008 MWR paper in Release mode
    - if [[ $TEST_SUITE == 'nair_jablonowski_2008' ]]; then . ./.travis_scripts/nair_jablonowski_2008.sh; fi
    
    # running pbl tests in Release mode
    - if [[ $TEST_SUITE == 'pbl' ]]; then . ./.travis_scripts/pbl.sh; fi

    # running bconds_div tests in Release mode
    - if [[ $TEST_SUITE == 'bcond_div' ]]; then . ./.travis_scripts/bconds_div.sh; fi
  
    # testing local clang on osx
    - if [[ $TEST_SUITE == 'osx_local_clang' ]]; then . ./.travis_scripts/unit.sh; fi # with '.' to pass env vars
